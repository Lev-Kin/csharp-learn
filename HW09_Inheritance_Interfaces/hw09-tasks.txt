===============================================================================

Задание 1.
Разработать класс Commodity, описывающий товар.
Автоматические свойства:
название товара;
цена в рублях.
дата изготовления
срок годности (в днях)
Методы:
GetExpirationDate() – возвращает дату окончания срока годности 
ToString( ) – переводит объект в строку с разделителями «;».

Разработать абстрактный базовый класс AbstaractPurchase,
описывающий покупку товара и реализующий интерфейс IComparable<AbstaractPurchase>
Поля:
товар Commodity;
количество единиц товара.
Конструкторы: 
с параметрами.
Свойства:
для чтения полей;
Методы:
GetCost( ) – стоимость покупки, абстрактный метод;
ToString( ) – переводит объект в строку с разделителями «;»;
CompareTo(AbstaractPurchase purchase) – сравнивает покупки по убыванию стоимости.
Операции:
операция сложения двух покупок одинакового товара
(результат – новая покупка с тем же товаром, в которой количество товара – 
суммарное количество в покупках-операндах;
при попытке сложить покупки с разным товаром должно генерироваться исключение ).

Разработать первый производный класс от AbstaractPurchase,
в котором продажа товара осуществляется со скидкой от цены.
Добавить нужные поля  и переопределить нужные методы.
Разработать второй производный класс от AbstaractPurchase,
в котором к стоимости товара добавляются дополнительные транспортные расходы.
Добавить нужные поля  и переопределить нужные методы.

Разработать консольное приложение, в котором:
1 Создать массив из шести объектов (по три каждого производного класса).
    С клавиатуры не вводить, использовать инициализатор.
2 Вывести объекты на консоль, используя ToString().
3 Отсортировать объекты по убыванию с использованием метода Sort( ) класса Array.
4 Вывести объекты на консоль через ToString().
5 Объединить все покупки заданного товара в одну, используя операцию сложения.
6 Вывести информацию о покупках товаров, до окончания срока годности которых
    осталось меньше 7 дней.

===============================================================================

Задание 2.
Создать абстрактный класс батарейки Battery,
содержащий поле для хранения текущего заряда,
абстрактный метод, уменьшающий заряд батарейки, тип результата которого bool
(истина, если заряд удалось уменьшить, ложь, если батарейка разряжена).

Создать класс китайской батарейки ChinaBattery, производный от абстрактной батарейки.
Китайской батарейки хватает не больше чем на семь включений фонарика.
Причем, исходный заряд определяется как случайное число в диапазоне от 1 до 7
(определять в конструкторе без параметров).
Реализовать в нем соответствующим образом абстрактный метод базового класса.

Создать класс батарейки Duracell,
который работает в 10 раз дольше, чем самая лучшая китайская батарейка.

Создать интерфейс IIlluminant с методами включения void On() и void Off() выключения,
а также методом bool IsLight().

Создать класс «Фабрика фонариков»
(фабрика выпускает фонарики с различными видами батареек.
В качестве светящегося элемента фонарика используется лампа накаливания
расходующая одну единицу энергии батарейки при включении фонарика).

Внутри класса «Фабрика фонариков» создать  закрытый класс фонарика (Flashlight),
реализующий интерфейс IIlluminant. Добавить в класс фонарика: 
поле класса, имеющее тип Battery;
методы включения void On() и void Off() выключения фонарика.
В методе включения проверять, учитывать и  изменять заряд батарейки; 
метод, проверяющий состояние фонарика bool  IsLight();
поле класса private bool  light, хранящее текущее состояние фонарика;
конструктор, в который передается батарейка.

Правила функционирования фонарика:
Созданный фонарик не должен светить; 
после включения фонарик должен светить; 
после выключения фонарик не должен светить; 
после соответствующего заряду батарейки количества
включений фонарик не должен светить при включении
(так как батарейка должна сесьть).

Добавить также в класс фабрики метод,
который создает фонарик GetFlashlight(Battery battary).

В методе main: 
создать объект фабрики
ввести количество фонариков, которое требуется  произвести на фабрике
сформировать массив объектов IIlluminant, причем,
каждый раз при создании фонарика тип батарейки определяется случайным образом
(поставки батареек на фабрику хаотичны и нестабильны).
Определить общее количество включений фонариков до их полной разрядки.

===============================================================================
