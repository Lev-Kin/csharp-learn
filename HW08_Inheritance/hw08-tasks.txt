===============================================================================

Задание 1.
Разработать базовый класс, определяющий покупку товара:
Поля:
название товара;
цена в рублях;
кол-во единиц товара.
Конструкторы:
по умолчанию;
с параметрами.

Методы:
установки/считывания полей;
GetCost( ) – вычисляет стоимость покупки;
ToString( ) – переводит объект в строку с разделителями «;»;
Equals( ) – сравнивает две продажи
(считаются равными, если совпадают название и цена).
Разработать первый производный класс, для покупки товара с фиксированной скидкой 
от цены и переопределить нужные методы (GetCost( ) и ToString( ).
Разработать второй производный класс (от базового) со скидкой к цене,
если количество единиц товара не меньше некоторой константы подкласса.
Переопределить нужные методы.

Разработать консольное приложение, выполняющее следующее:
1 Создать массив из шести объектов
(2 – базового класса, по 2 – каждого производного класса).
2 Вывести массив на консоль.
3 Вывести покупку с максимальной стоимостью.
4 Определить, являются ли все покупки равными.
Задачи 2–4 реализовать в одном общем цикле.

===============================================================================

Задание 2.
Создать абстрактный класс Polygon, содержащий следующие элементы:
закрытые поля – название фигуры, массив сторон; конструктор с параметрами,
метод ToString(), абстрактный метод вычисления площади многоугольника. 

Создать класс Triangle, производный от класса Polygon,
содержащий свойства для чтения сторон Side1, Side2, Side3,
реализовать в нем метод вычисления площади и добавить метод для
вычисления периметра.

Создать класс Rectangle, производный от класса Polygon,
содержащий свойства для чтения сторон Width и Height,
реализовать в нем метод вычисления площади.
В программе нужно формировать массив многоугольников
(не меньше четырех), состоящий из объектов  Triangle и Rectangle
(не вводить с клавиатуры), выводить информацию в табличном виде.
Массив нужно отсортировать по убыванию площадей.

Фигура	Стороны	Площадь	Периметр
треугольник	5,3,4	6	12
прямоугольник	4,2	8	 - 
…			
Определить количество фигур, площадь которых меньше заданной.

===============================================================================

Задание 3.
Создать иерархию классов:
Класс наземного транспорта должен быть абстрактным и содержать следующие элементы:
поле – номер рейса;
поле – массив, содержащий стоимость билета
(каждый элемент – стоимость билета определенного вида);
автоматические свойства -  пункт отправления и пункт назначения, конструктор; 
абстрактный индексатор, возвращающий стоимость билета указанного вида
(тип индекса - строковый):
public abstract int this[string type] {get;}
абстрактное свойство, возвращающее количество свободных мест
public abstract int Count { get; }
, виртуальный метод вывода информации.
	Класс автобусов должен содержать поле с количеством свободных мест;
    переопределять индексатор, в котором индекс может принимать значения мягкий, жесткий;
    переопределять свойство, возвращающее количество свободных мест, конструктор.
	Класс поездов должен содержать поле-массив с количеством свободных мест в каждом вагоне;
    переопределять индексатор, в котором индекс может принимать значения
    люкс, купейный, плацкартный, общий;
    переопределять свойство, возвращающее количество свободных мест,
    переопределять метод вывода информации, конструктор.

Разработать консольное приложение, которое формирует массив объектов типа «Транспорт»
(не вводить с клавиатуры) и выводит исходные данные выводит в отдельной
таблице список поездов до заданного пункта назначения с указанием количества
свободных мест в указанных вагонах.
Выводит информацию, выделяя красным цветом строки без свободных мест, в виде:

Вид транспорта	Номер рейса	Пункт отправления	Пункт назначения	Количество свободных мест
поезд	256	Гомель	Минск	120
 Выводит цену  билета заданного вида на заданный вид транспорта в виде:
                Цены билетов на поезд
Номер рейса	Люкс
256	280

===============================================================================

