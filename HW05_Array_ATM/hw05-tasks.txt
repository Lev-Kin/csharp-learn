===============================================================================

Задание 1. 
Написать приложение, имитирующее работу банкомата. 
Реализовать классы Banc, Client, Account в различных пространствах имен
(общее пространство имен «Bankomat»). 
Изначально клиенту нужно открыть счёт в банке, получить номер счёта, получить свой 
пароль, положить сумму на счёт. 
1. Приложение предлагает ввести пароль предполагаемой кредитной карточки, даётся 3 
   попытки на правильный ввод пароля.
   Если попытки исчерпаны, приложение выдаёт соответствующее сообщение и завершается.
2. При успешном вводе пароля выводится меню. Пользователь может выбрать одно из 
   нескольких действий:
■ вывод баланса на экран; 
■ пополнение счёта; 
■ снять деньги со счёта; 
■ выход. 
3. Если пользователь выбирает вывод баланса на экран, приложение отображает 
   состояние предполагаемого счёта, после чего предлагает либо вернуться в меню, 
   либо совершить выход.
4. Если пользователь выбирает пополнение счёта, программа запрашивает сумму для 
   пополнения и выполняет операцию, сопровождая её выводом соответствующего комментария. 
   Затем следует предложение вернуться в меню или выполнить выход. 
5. Если пользователь выбирает снять деньги со счёта, программа 
   запрашивает сумму. Если сумма превышает сумму счёта пользователя,
   программа выдаёт сообщение и переводит пользователя в меню. 
   Иначе отображает сообщение о том, что сумма снята со счёта и 
   уменьшает сумму счёта на указанную величину.

===============================================================================

Задание 2
Если в квадратной матрице A сумма элементов столбцов, состоящих из положительных 
элементов, больше чем такая же сумма в квадратной матрице В, заменить все нулевые
элементы матрицы В на значение суммы элементов диагоналей этой матрицы. 
В противном случае определить сумму элементов диагоналей матрицы А. 
При создании объектов класса матрицы-аргументы конструктора создавать 
с использованием синтаксиса инициализаторов. С клавиатуры не вводить. 
Для решения задачи создать класс Matrix, содержащий: 
- закрытое поле-массив для хранения данных, 
- конструктор без параметров для создания единичной матрицы 3×3, 
- конструктор с параметрами (параметр – матрица целых чисел),
- метод  ToString(), возвращающий строковое представление  матрицы, 
- индексатор для доступа к элементам поля-массива, 
- свойства, возвращающие количество строк и столбцов матрицы,
- закрытый (private) метод, возвращающий true, если столбец состоит из 
  положительных элементов (параметр – номер столбца),
- метод, возвращающий сумму элементов столбцов, состоящих из положительных элементов,
- свойство, возвращающее сумму элементов диагоналей матрицы.

===============================================================================

Задание 3.
Разработать класс, определяющий покупку товара:
Поля:
название товара;
цена в рублях;
кол-во единиц товара.
Конструкторы:
    по умолчанию;
    с параметрами.
Методы:
    установки/считывания полей;
    GetCost( ) – вычисляет стоимость покупки;
    ToString( ) – переводит объект в строку с разделителями «;»;
    Equals( ) – сравнивает две продажи 
    (считаются равными, если совпадают название и цена).
Разработать консольное приложение, выполняющее следующее:
1 Создать массив из шести объектов.
2 Вывести массив на консоль.
3 Вывести покупку с максимальной стоимостью.
4 Определить, являются ли все покупки равными.
Задачи 2–4 реализовать в одном общем цикле.

===============================================================================
